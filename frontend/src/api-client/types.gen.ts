// This file is auto-generated by @hey-api/openapi-ts

export type Challenge = {
    id?: number | null;
    username: string;
    challenge: string;
};

export type ChallengeRequest = {
    username: string;
};

export type CreateGroupRequest = {
    name: string;
    symmetric_key: string;
};

export type EditProfileRequest = {
    description: string;
    social_link: string;
};

export type ExceptionModel = {
    detail: string;
};

export type Group = {
    id?: number;
    name: string;
    owner_id: number;
};

export type GroupAddUserRequest = {
    user_id: number;
    symmetric_key: string;
    group_id: number;
};

export type GroupMember = {
    user_id: number;
    group_id: number;
    symmetric_key: string;
};

export type GroupMessageRequest = {
    content: string;
    nonce: string;
    group_id: number;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type Message = {
    id?: number | null;
    content: string;
    nonce: string;
    sender_id: number;
    group_id: number;
};

export type MessageNotification = {
    type?: 'messageNotification';
    message: Message;
    sender_name: string;
};

export type OwnGroupInfo = {
    group_id: number;
    group_name: string;
    symmetric_key: string;
};

export type OwnGroupsResponse = {
    groups: Array<OwnGroupInfo>;
};

export type User = {
    id?: number | null;
    username: string;
    public_key: string;
    description?: string | null;
    social_link?: string | null;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type SignupApiAuthSignupPostData = {
    body: User;
    path?: never;
    query?: never;
    url: '/api/auth/signup';
};

export type SignupApiAuthSignupPostErrors = {
    /**
     * Conflict
     */
    409: ExceptionModel;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SignupApiAuthSignupPostError = SignupApiAuthSignupPostErrors[keyof SignupApiAuthSignupPostErrors];

export type SignupApiAuthSignupPostResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type SignupApiAuthSignupPostResponse = SignupApiAuthSignupPostResponses[keyof SignupApiAuthSignupPostResponses];

export type ChallengeApiAuthLoginChallengePostData = {
    body: ChallengeRequest;
    path?: never;
    query?: never;
    url: '/api/auth/login_challenge';
};

export type ChallengeApiAuthLoginChallengePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ChallengeApiAuthLoginChallengePostError = ChallengeApiAuthLoginChallengePostErrors[keyof ChallengeApiAuthLoginChallengePostErrors];

export type ChallengeApiAuthLoginChallengePostResponses = {
    /**
     * Successful Response
     */
    200: Challenge;
};

export type ChallengeApiAuthLoginChallengePostResponse = ChallengeApiAuthLoginChallengePostResponses[keyof ChallengeApiAuthLoginChallengePostResponses];

export type AnswerApiAuthLoginAnswerPostData = {
    body: Challenge;
    path?: never;
    query?: never;
    url: '/api/auth/login_answer';
};

export type AnswerApiAuthLoginAnswerPostErrors = {
    /**
     * Forbidden
     */
    403: ExceptionModel;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AnswerApiAuthLoginAnswerPostError = AnswerApiAuthLoginAnswerPostErrors[keyof AnswerApiAuthLoginAnswerPostErrors];

export type AnswerApiAuthLoginAnswerPostResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type AnswerApiAuthLoginAnswerPostResponse = AnswerApiAuthLoginAnswerPostResponses[keyof AnswerApiAuthLoginAnswerPostResponses];

export type HandleCreateGroupApiGroupsCreatePostData = {
    body: CreateGroupRequest;
    path?: never;
    query?: never;
    url: '/api/groups/create';
};

export type HandleCreateGroupApiGroupsCreatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HandleCreateGroupApiGroupsCreatePostError = HandleCreateGroupApiGroupsCreatePostErrors[keyof HandleCreateGroupApiGroupsCreatePostErrors];

export type HandleCreateGroupApiGroupsCreatePostResponses = {
    /**
     * Successful Response
     */
    200: Group;
};

export type HandleCreateGroupApiGroupsCreatePostResponse = HandleCreateGroupApiGroupsCreatePostResponses[keyof HandleCreateGroupApiGroupsCreatePostResponses];

export type HandleAddGroupUserApiGroupsAddPostData = {
    body: GroupAddUserRequest;
    path?: never;
    query?: never;
    url: '/api/groups/add';
};

export type HandleAddGroupUserApiGroupsAddPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HandleAddGroupUserApiGroupsAddPostError = HandleAddGroupUserApiGroupsAddPostErrors[keyof HandleAddGroupUserApiGroupsAddPostErrors];

export type HandleAddGroupUserApiGroupsAddPostResponses = {
    /**
     * Successful Response
     */
    200: GroupMember;
};

export type HandleAddGroupUserApiGroupsAddPostResponse = HandleAddGroupUserApiGroupsAddPostResponses[keyof HandleAddGroupUserApiGroupsAddPostResponses];

export type HandleGetUserGroupsApiGroupsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/groups/';
};

export type HandleGetUserGroupsApiGroupsGetResponses = {
    /**
     * Successful Response
     */
    200: OwnGroupsResponse;
};

export type HandleGetUserGroupsApiGroupsGetResponse = HandleGetUserGroupsApiGroupsGetResponses[keyof HandleGetUserGroupsApiGroupsGetResponses];

export type GetGroupMessagesApiMessagesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/messages/';
};

export type GetGroupMessagesApiMessagesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<MessageNotification>;
};

export type GetGroupMessagesApiMessagesGetResponse = GetGroupMessagesApiMessagesGetResponses[keyof GetGroupMessagesApiMessagesGetResponses];

export type SendMessageApiMessagesPostData = {
    body: GroupMessageRequest;
    path?: never;
    query?: never;
    url: '/api/messages/';
};

export type SendMessageApiMessagesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SendMessageApiMessagesPostError = SendMessageApiMessagesPostErrors[keyof SendMessageApiMessagesPostErrors];

export type SendMessageApiMessagesPostResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type SendMessageApiMessagesPostResponse = SendMessageApiMessagesPostResponses[keyof SendMessageApiMessagesPostResponses];

export type WhoamiApiSessionWhoamiGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/session/whoami';
};

export type WhoamiApiSessionWhoamiGetResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type WhoamiApiSessionWhoamiGetResponse = WhoamiApiSessionWhoamiGetResponses[keyof WhoamiApiSessionWhoamiGetResponses];

export type HandleGetUserByUsernameApiUsersUsernameGetData = {
    body?: never;
    path?: never;
    query: {
        username: string;
    };
    url: '/api/users/username';
};

export type HandleGetUserByUsernameApiUsersUsernameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HandleGetUserByUsernameApiUsersUsernameGetError = HandleGetUserByUsernameApiUsersUsernameGetErrors[keyof HandleGetUserByUsernameApiUsersUsernameGetErrors];

export type HandleGetUserByUsernameApiUsersUsernameGetResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type HandleGetUserByUsernameApiUsersUsernameGetResponse = HandleGetUserByUsernameApiUsersUsernameGetResponses[keyof HandleGetUserByUsernameApiUsersUsernameGetResponses];

export type HandleGetUserByIdApiUsersIdGetData = {
    body?: never;
    path?: never;
    query: {
        uid: number;
    };
    url: '/api/users/id';
};

export type HandleGetUserByIdApiUsersIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HandleGetUserByIdApiUsersIdGetError = HandleGetUserByIdApiUsersIdGetErrors[keyof HandleGetUserByIdApiUsersIdGetErrors];

export type HandleGetUserByIdApiUsersIdGetResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type HandleGetUserByIdApiUsersIdGetResponse = HandleGetUserByIdApiUsersIdGetResponses[keyof HandleGetUserByIdApiUsersIdGetResponses];

export type HandleEditProfileApiUsersEditProfilePostData = {
    body: EditProfileRequest;
    path?: never;
    query?: never;
    url: '/api/users/edit_profile';
};

export type HandleEditProfileApiUsersEditProfilePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HandleEditProfileApiUsersEditProfilePostError = HandleEditProfileApiUsersEditProfilePostErrors[keyof HandleEditProfileApiUsersEditProfilePostErrors];

export type HandleEditProfileApiUsersEditProfilePostResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type HandleEditProfileApiUsersEditProfilePostResponse = HandleEditProfileApiUsersEditProfilePostResponses[keyof HandleEditProfileApiUsersEditProfilePostResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};