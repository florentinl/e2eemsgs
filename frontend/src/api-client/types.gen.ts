// This file is auto-generated by @hey-api/openapi-ts

export type Challenge = {
  id?: number | null;
  username: string;
  challenge: string;
};

export type ChallengeRequest = {
  username: string;
};

export type CreateGroupRequest = {
  name: string;
  symmetric_key: string;
};

export type ExceptionModel = {
  detail: string;
};

export type GetUidResponse = {
  uid: number;
};

export type Group = {
  id?: number;
  name: string;
  owner_id: number;
};

export type GroupAddUserRequest = {
  user_id: number;
  symmetric_key: string;
  group_id: number;
};

export type GroupMember = {
  user_id: number;
  group_id: number;
  symmetric_key: string;
};

export type GroupMessageRequest = {
  content: string;
  nonce: string;
  group_id: number;
};

export type HttpValidationError = {
  detail?: Array<ValidationError>;
};

export type OwnGroupInfo = {
  group_id: number;
  group_name: string;
  symmetric_key: string;
};

export type OwnGroupsResponse = {
  groups: Array<OwnGroupInfo>;
};

export type User = {
  id?: number | null;
  username: string;
  public_key: string;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type SignupApiAuthSignupPostData = {
  body: User;
  path?: never;
  query?: never;
  url: "/api/auth/signup";
};

export type SignupApiAuthSignupPostErrors = {
  /**
   * Conflict
   */
  409: ExceptionModel;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type SignupApiAuthSignupPostError =
  SignupApiAuthSignupPostErrors[keyof SignupApiAuthSignupPostErrors];

export type SignupApiAuthSignupPostResponses = {
  /**
   * Successful Response
   */
  200: User;
};

export type SignupApiAuthSignupPostResponse =
  SignupApiAuthSignupPostResponses[keyof SignupApiAuthSignupPostResponses];

export type ChallengeApiAuthLoginChallengePostData = {
  body: ChallengeRequest;
  path?: never;
  query?: never;
  url: "/api/auth/login_challenge";
};

export type ChallengeApiAuthLoginChallengePostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ChallengeApiAuthLoginChallengePostError =
  ChallengeApiAuthLoginChallengePostErrors[keyof ChallengeApiAuthLoginChallengePostErrors];

export type ChallengeApiAuthLoginChallengePostResponses = {
  /**
   * Successful Response
   */
  200: Challenge;
};

export type ChallengeApiAuthLoginChallengePostResponse =
  ChallengeApiAuthLoginChallengePostResponses[keyof ChallengeApiAuthLoginChallengePostResponses];

export type AnswerApiAuthLoginAnswerPostData = {
  body: Challenge;
  path?: never;
  query?: never;
  url: "/api/auth/login_answer";
};

export type AnswerApiAuthLoginAnswerPostErrors = {
  /**
   * Forbidden
   */
  403: ExceptionModel;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AnswerApiAuthLoginAnswerPostError =
  AnswerApiAuthLoginAnswerPostErrors[keyof AnswerApiAuthLoginAnswerPostErrors];

export type AnswerApiAuthLoginAnswerPostResponses = {
  /**
   * Successful Response
   */
  200: User;
};

export type AnswerApiAuthLoginAnswerPostResponse =
  AnswerApiAuthLoginAnswerPostResponses[keyof AnswerApiAuthLoginAnswerPostResponses];

export type HandleCreateGroupApiGroupsCreatePostData = {
  body: CreateGroupRequest;
  path?: never;
  query?: never;
  url: "/api/groups/create";
};

export type HandleCreateGroupApiGroupsCreatePostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type HandleCreateGroupApiGroupsCreatePostError =
  HandleCreateGroupApiGroupsCreatePostErrors[keyof HandleCreateGroupApiGroupsCreatePostErrors];

export type HandleCreateGroupApiGroupsCreatePostResponses = {
  /**
   * Successful Response
   */
  200: Group;
};

export type HandleCreateGroupApiGroupsCreatePostResponse =
  HandleCreateGroupApiGroupsCreatePostResponses[keyof HandleCreateGroupApiGroupsCreatePostResponses];

export type HandleAddGroupUserApiGroupsAddPostData = {
  body: GroupAddUserRequest;
  path?: never;
  query?: never;
  url: "/api/groups/add";
};

export type HandleAddGroupUserApiGroupsAddPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type HandleAddGroupUserApiGroupsAddPostError =
  HandleAddGroupUserApiGroupsAddPostErrors[keyof HandleAddGroupUserApiGroupsAddPostErrors];

export type HandleAddGroupUserApiGroupsAddPostResponses = {
  /**
   * Successful Response
   */
  200: GroupMember;
};

export type HandleAddGroupUserApiGroupsAddPostResponse =
  HandleAddGroupUserApiGroupsAddPostResponses[keyof HandleAddGroupUserApiGroupsAddPostResponses];

export type HandleGetUserGroupsApiGroupsPostData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/groups/";
};

export type HandleGetUserGroupsApiGroupsPostResponses = {
  /**
   * Successful Response
   */
  200: OwnGroupsResponse;
};

export type HandleGetUserGroupsApiGroupsPostResponse =
  HandleGetUserGroupsApiGroupsPostResponses[keyof HandleGetUserGroupsApiGroupsPostResponses];

export type GetUidApiSessionGetUidPostData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/session/get_uid";
};

export type GetUidApiSessionGetUidPostResponses = {
  /**
   * Successful Response
   */
  200: GetUidResponse;
};

export type GetUidApiSessionGetUidPostResponse =
  GetUidApiSessionGetUidPostResponses[keyof GetUidApiSessionGetUidPostResponses];

export type HandleGetUserApiUsersGetData = {
  body?: never;
  path?: never;
  query: {
    username: string;
  };
  url: "/api/users/";
};

export type HandleGetUserApiUsersGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type HandleGetUserApiUsersGetError =
  HandleGetUserApiUsersGetErrors[keyof HandleGetUserApiUsersGetErrors];

export type HandleGetUserApiUsersGetResponses = {
  /**
   * Successful Response
   */
  200: User;
};

export type HandleGetUserApiUsersGetResponse =
  HandleGetUserApiUsersGetResponses[keyof HandleGetUserApiUsersGetResponses];

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & {});
};
