// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { SignupApiAuthSignupPostData, SignupApiAuthSignupPostResponse, SignupApiAuthSignupPostError, ChallengeApiAuthLoginChallengePostData, ChallengeApiAuthLoginChallengePostResponse, ChallengeApiAuthLoginChallengePostError, AnswerApiAuthLoginAnswerPostData, AnswerApiAuthLoginAnswerPostResponse, AnswerApiAuthLoginAnswerPostError, HandleCreateGroupApiGroupsCreatePostData, HandleCreateGroupApiGroupsCreatePostResponse, HandleCreateGroupApiGroupsCreatePostError, HandleAddGroupUserApiGroupsAddPostData, HandleAddGroupUserApiGroupsAddPostResponse, HandleAddGroupUserApiGroupsAddPostError, HandleGetUserGroupsApiGroupsPostData, HandleGetUserGroupsApiGroupsPostResponse, SendMessageApiMessagesPostData, SendMessageApiMessagesPostResponse, SendMessageApiMessagesPostError, GetUidApiSessionGetUidPostData, GetUidApiSessionGetUidPostResponse, HandleGetUserApiUsersGetData, HandleGetUserApiUsersGetResponse, HandleGetUserApiUsersGetError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Signup
 */
export const signupApiAuthSignupPost = <ThrowOnError extends boolean = false>(options: Options<SignupApiAuthSignupPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SignupApiAuthSignupPostResponse, SignupApiAuthSignupPostError, ThrowOnError>({
        url: '/api/auth/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Challenge
 */
export const challengeApiAuthLoginChallengePost = <ThrowOnError extends boolean = false>(options: Options<ChallengeApiAuthLoginChallengePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ChallengeApiAuthLoginChallengePostResponse, ChallengeApiAuthLoginChallengePostError, ThrowOnError>({
        url: '/api/auth/login_challenge',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Answer
 */
export const answerApiAuthLoginAnswerPost = <ThrowOnError extends boolean = false>(options: Options<AnswerApiAuthLoginAnswerPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AnswerApiAuthLoginAnswerPostResponse, AnswerApiAuthLoginAnswerPostError, ThrowOnError>({
        url: '/api/auth/login_answer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Handle Create Group
 */
export const handleCreateGroupApiGroupsCreatePost = <ThrowOnError extends boolean = false>(options: Options<HandleCreateGroupApiGroupsCreatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<HandleCreateGroupApiGroupsCreatePostResponse, HandleCreateGroupApiGroupsCreatePostError, ThrowOnError>({
        url: '/api/groups/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Handle Add Group User
 */
export const handleAddGroupUserApiGroupsAddPost = <ThrowOnError extends boolean = false>(options: Options<HandleAddGroupUserApiGroupsAddPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<HandleAddGroupUserApiGroupsAddPostResponse, HandleAddGroupUserApiGroupsAddPostError, ThrowOnError>({
        url: '/api/groups/add',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Handle Get User Groups
 */
export const handleGetUserGroupsApiGroupsPost = <ThrowOnError extends boolean = false>(options?: Options<HandleGetUserGroupsApiGroupsPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<HandleGetUserGroupsApiGroupsPostResponse, unknown, ThrowOnError>({
        url: '/api/groups/',
        ...options
    });
};

/**
 * Send Message
 */
export const sendMessageApiMessagesPost = <ThrowOnError extends boolean = false>(options: Options<SendMessageApiMessagesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendMessageApiMessagesPostResponse, SendMessageApiMessagesPostError, ThrowOnError>({
        url: '/api/messages/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Uid
 */
export const getUidApiSessionGetUidPost = <ThrowOnError extends boolean = false>(options?: Options<GetUidApiSessionGetUidPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GetUidApiSessionGetUidPostResponse, unknown, ThrowOnError>({
        url: '/api/session/get_uid',
        ...options
    });
};

/**
 * Handle Get User
 */
export const handleGetUserApiUsersGet = <ThrowOnError extends boolean = false>(options: Options<HandleGetUserApiUsersGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<HandleGetUserApiUsersGetResponse, HandleGetUserApiUsersGetError, ThrowOnError>({
        url: '/api/users/',
        ...options
    });
};